import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.BBnPlPAH.js";const t="/assets/image-20220206131851374.CuekXWlh.png",e="/assets/image-20220206133626317.CwLLwUSY.png",p="/assets/image-20220206133943067.-KJ3p3gf.png",F=JSON.parse('{"title":"Spring注解驱动开发【源码】——AOP原理——@EnableAspectJAutoProxy","description":"","frontmatter":{"title":"Spring注解驱动开发【源码】——AOP原理——@EnableAspectJAutoProxy","date":"2022-02-06T11:41:52.000Z","tags":null},"headers":[],"relativePath":"spring/annotation/10-@EnableAspectJAutoProxy.md","filePath":"spring/annotation/10-@EnableAspectJAutoProxy.md","lastUpdated":1729870203000}'),l={name:"spring/annotation/10-@EnableAspectJAutoProxy.md"},h=n('<p>要实现注解版的AOP功能，最核心的注解就是@EnableAspectJAutoProxy了，有了它，AOP模式才生效。</p><h4 id="流程分析图" tabindex="-1">流程分析图 <a class="header-anchor" href="#流程分析图" aria-label="Permalink to &quot;流程分析图&quot;">​</a></h4><p><img src="'+t+`" alt="image-20220206131851374"></p><p>可以看到，使用@EnableAspectJAutoProxy注解实际上就是使用@Import导入一个实现了ImportBeanDefinitionRegistrar的组件，也就是利用AspectJAutoProxyRegistrar实现registerBeanDefinitions方法及那个bean手动注册到容器中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * of the @{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnableAspectJAutoProxy</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">proxyTargetClass()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">} attribute on the importing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * {@code @Configuration} class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerBeanDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将AspectJAnnotationAutoProxyCreator注册到容器中如果需要的话</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AopConfigUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 得到EnableAspectJAutoProxy注解的信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AnnotationAttributes enableAspectJAutoProxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AnnotationConfigUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attributesFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(importingClassMetadata, EnableAspectJAutoProxy.class);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断是否包含proxyTargetClass属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (enableAspectJAutoProxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxyTargetClass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AopConfigUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forceAutoProxyCreatorToUseClassProxying</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断是否包含exposeProxy属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (enableAspectJAutoProxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exposeProxy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AopConfigUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forceAutoProxyCreatorToExposeProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在registerBeanDefinitions方法中，通过AopConfigUtils中的方法将AspectJAnnotationAutoProxyCreator注册到容器中，如果需要的话。之后拿到EnableAspectJAutoProxy注解的信息，再对其进行判断“proxyTargetClass”和“exposeProxy”是否为true，如果为true，对其进行相应操作。</p><p>最终，registerAspectJAnnotationAutoProxyCreatorIfNecessary方法经过两层封装来到了registerOrEscalateApcAsRequired：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeanDefinition </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerOrEscalateApcAsRequired</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cls, BeanDefinitionRegistry registry, Object source) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BeanDefinitionRegistry must not be null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断容器中是否已经有internalAutoProxyCreator，有则让internalAutoProxyCreator = AnnotationAwareAspectJAutoProxyCreator将AnnotationAwareAspectJAutoProxyCreator注册到容器中去</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AUTO_PROXY_CREATOR_BEAN_NAME)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BeanDefinition apcDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AUTO_PROXY_CREATOR_BEAN_NAME);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apcDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentPriority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findPriorityForClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apcDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requiredPriority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findPriorityForClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (currentPriority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requiredPriority) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                apcDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBeanClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 没有，新建一个关于AnnotationAwareAspectJAutoProxyCreator的bean的定义信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RootBeanDefinition beanDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RootBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beanDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beanDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPropertyValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Ordered.HIGHEST_PRECEDENCE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beanDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanDefinition.ROLE_INFRASTRUCTURE);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // internalAutoProxyCreator = AnnotationAwareAspectJAutoProxyCreator注册到容器中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanDefinition;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个方法传了一个参数：AnnotationAwareAspectJAutoProxyCreator</p><p><img src="`+e+'" alt="image-20220206133626317"></p><p>然后，它判断容器中是否有internalAutoProxyCreator。</p><p><img src="'+p+'" alt="image-20220206133943067"></p><p>如果容器中有internalAutoProxyCreator，则会让传入的cls也就是AnnotationAwareAspectJAutoProxyCreator赋给internalAutoProxyCreator。</p><p>而我们这里并没有这个组件，因此它会创建一个AnnotationAwareAspectJAutoProxyCreator的RootBeanDefinition(new RootBeanDefinition()也就是创建一个bean的定义信息)。</p><p>最后，依然是通过internalAutoProxyCreator = AnnotationAwareAspectJAutoProxyCreator将AnnotationAwareAspectJAutoProxyCreator注册到容器中。</p><hr><p><strong>因此，@EnableAspectJAutoProxy注解的作用就是将我们的AnnotationAwareAspectJAutoProxyCreator注册到容器中。</strong></p><hr>',18),k=[h];function r(o,E,g,y,d,A){return a(),i("div",null,k)}const u=s(l,[["render",r]]);export{F as __pageData,u as default};
