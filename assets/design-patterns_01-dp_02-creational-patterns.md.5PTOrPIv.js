import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.BBnPlPAH.js";const l="/assets/image-20240723153228647.BVUXb9n0.png",y=JSON.parse('{"title":"创建型模式","description":"","frontmatter":{},"headers":[],"relativePath":"design-patterns/01-dp/02-creational-patterns.md","filePath":"design-patterns/01-dp/02-creational-patterns.md","lastUpdated":1729870203000}'),t={name:"design-patterns/01-dp/02-creational-patterns.md"},e=n(`<h1 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">​</a></h1><p>创建型模式的关注点是 <code>怎样创建出对象？</code>，它 “将对象的创建与使用分离”，以此来降低系统的耦合度，同时 使用者无需关注对象的创建细节。</p><p>创建型模式主要有以下四种：</p><ol><li>对象的创建由相关的工厂来完成；（各种工厂模式）</li><li>对象的创建由一个建造者来完成；（建造者模式）</li><li>对象的创建由原来对象克隆完成；（原型模式）</li><li>对象始终在系统中只有一个实例；（单例模式）</li></ol><h2 id="单例模式-singleton" tabindex="-1">单例模式（Singleton） <a class="header-anchor" href="#单例模式-singleton" aria-label="Permalink to &quot;单例模式（Singleton）&quot;">​</a></h2><p>单例的核心思想就是 <code>一个单一的类，负责创建自己的对象，同时确保系统中只有单个对象被创建</code>，而这种思想造成它的特点就是：</p><ul><li>某个类只能有一个实例；（构造器私有）</li><li>它必须自行创建这个实例；（自己编写实例化逻辑）</li><li>它必须自行向整个系统提供这个实例；（对外提供实例化方法）</li></ul><p>下面来看一个简单的单例实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 饿汉式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // private final static Person instance = new Person();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person instance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Person constructor...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 双重检查锁 + 内存可见性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Person </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Person.class) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们给 Person 类的构造器设置访问权限为 private, 这能保证它不被外部容器创建实例，同时我们定义一个 <code>getInstance</code> 方法让外部容器能够获得 Person 类实例。 为了能被静态方法调用，因此我们还加上了 <code>static</code> 关键字</p><p>在 Person 来中定义一个 <code>private volatile static</code> 的 Person 类属性，在 <code>getInstance</code> 中使用 <code>synchronized</code> 对其进行实例化，通过 <code>双重检查锁 + 内存可见性</code> 来确保外部容器自始自终能且只能获取到唯一的一个 Person 实例</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于单例模式的实现有饿汉式和懒汉式两种实现，而懒汉式为了保证多线程环境下的唯一性又有多种实现，这里的写法并不是唯一的！</p></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>什么场景用到单例模式？</p><ul><li>多线程中的线程池</li><li>数据库的连接池</li><li>系统环境信息</li><li>上下文（ServletContext）</li><li>......</li></ul><p>面试问题</p><ul><li>系统环境信息（System.getProperties()）？</li><li>Spring 中怎么保持组件单例的？</li><li>ServletContext 是什么（封装 Servlet 的信息）？是单例吗？怎么保证？</li><li>ApplicationContext 是什么？是单例吗？怎么保证？</li><li>数据库连接池一般怎么创建出来的，怎么保证单实例？</li><li>......</li></ul><details class="details custom-block"><summary>这些问题的答案</summary><p>将在后面逐一揭晓 : blush:</p></details><h2 id="原型模式-prototype" tabindex="-1">原型模式（Prototype） <a class="header-anchor" href="#原型模式-prototype" aria-label="Permalink to &quot;原型模式（Prototype）&quot;">​</a></h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。下面以一个</p><p><img src="`+l+'" alt="image-20240723153228647"></p><p>如图，MyBatisCache 是一个简化的 MyBatis 框架，当我们根据用户名查找用户时，它可以返回</p><h3 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>资源优化</li><li>性能和安全要求</li><li>一个对象多个修改者的场景。</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时可以考虑使用原型模式拷贝多个对象供调用者使用。</li><li>深（两个完全对象不一样的【递归克隆】，内容却完全一样）、浅（只是属性赋值）....</li><li>......</li></ul><p><strong>原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用</strong></p>',25),p=[e];function h(k,r,o,d,c,E){return a(),i("div",null,p)}const u=s(t,[["render",h]]);export{y as __pageData,u as default};
