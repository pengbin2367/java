import{_ as a,c as e,o as i,a5 as r}from"./chunks/framework.BAO6c_AF.js";const m=JSON.parse('{"title":"华为od","description":"","frontmatter":{},"headers":[],"relativePath":"interview/HWOD.md","filePath":"interview/HWOD.md","lastUpdated":1729870203000}'),t={name:"interview/HWOD.md"},o=r('<h1 id="华为od" tabindex="-1">华为od <a class="header-anchor" href="#华为od" aria-label="Permalink to &quot;华为od&quot;">​</a></h1><h2 id="资面" tabindex="-1">资面 <a class="header-anchor" href="#资面" aria-label="Permalink to &quot;资面&quot;">​</a></h2><h3 id="自我介绍" tabindex="-1">自我介绍 <a class="header-anchor" href="#自我介绍" aria-label="Permalink to &quot;自我介绍&quot;">​</a></h3><p>尊敬的面试官，您好！</p><p>我是，2023年毕业于专业。在大学期间，我不仅系统地学习了计算机科学的基础理论，还积极参与了多个实践项目，积累了扎实的专业基础。毕业后，我选择了继续深造，参加了2023年的研究生入学考试，虽然未能如愿考上，但这段时间的经历让我更加坚定了投身于IT行业的决心。</p><p>我一直对华为的技术实力和企业文化充满了敬佩，华为在全球通信和信息技术领域的领先地位，以及不断创新的精神深深吸引了我。我希望能够在华为这样的大平台工作，不仅是因为这里汇聚了一大批优秀的技术人才，更是因为我相信在这里能够获得更多的学习和成长机会，实现自我价值。</p><p>在准备考研的同时，我也不断加强自己的技术能力，特别是对Java编程语言进行了深入的学习。通过自学和实践，我已经掌握了Java的核心技术栈，并且独立完成了一个分布式微服务项目。虽然该项目尚未上线，但它让我在微服务架构设计、Spring Boot框架的应用以及Docker容器化等方面积累了宝贵的经验。</p><p>我非常希望能够加入华为，成为一名Java开发工程师。我相信，通过在华为的工作，我不仅可以进一步提升自己的技术能力，还能在实践中不断成长，为公司的发展贡献自己的力量。我渴望成为华为的一员，与优秀的同事们一起携手前行，共同推动技术创新。</p><p>感谢您花时间听我介绍。</p><h3 id="为什么选择考研" tabindex="-1">为什么选择考研 <a class="header-anchor" href="#为什么选择考研" aria-label="Permalink to &quot;为什么选择考研&quot;">​</a></h3><p>我选择考研主要是出于对计算机科学的热爱和对未来职业发展的考虑。首先，我在本科期间对计算机科学产生了浓厚的兴趣，特别是在软件开发和系统架构方面。我希望通过研究生的学习，能够更加深入地研究这些领域，进一步提升自己的专业水平。</p><p>其次，我认为考研可以为我的职业生涯打下更坚实的基础。随着技术的飞速发展，市场上对高级技术人才的需求越来越大。我希望通过研究生阶段的学习，能够掌握更多的前沿技术，提高自己的竞争力，为将来的工作奠定更好的基础。</p><p>此外，考研也是我个人成长的一部分。研究生阶段不仅能够让我在学术上有所进步，还能培养我的研究能力和解决问题的能力。这些都是我在未来的职业生涯中所需要的素质。</p><p>虽然最终我没有成功考取研究生，但这段经历让我更加珍惜每一次学习和实践的机会。我坚信，通过不断的努力和积累，我依然能够在技术领域取得成就。这也是我选择加入华为的原因之一，因为在这里我可以与优秀的同事一起工作，共同成长，实现自己的职业目标。</p><h3 id="为什么选择华为" tabindex="-1">为什么选择华为 <a class="header-anchor" href="#为什么选择华为" aria-label="Permalink to &quot;为什么选择华为&quot;">​</a></h3><p>我选择华为的原因有很多，首先是华为在全球通信和信息技术领域的领导地位。华为不仅是中国的骄傲，也是全球范围内备受尊敬的高科技企业。我非常钦佩华为在5G、云计算、人工智能等多个前沿技术领域的成就，这些技术正在改变世界，推动社会的进步和发展。</p><p>其次，华为在技术研发方面的投入和成果令人印象深刻。华为每年都会投入大量的资金和人力进行研发，致力于技术创新和产品升级。作为一名技术爱好者，我深知技术创新的重要性，也非常希望能够加入到这样一家重视研发的企业中，与一群优秀的同事一起推动技术的发展。</p><p>另外，华为的企业文化和发展前景也深深地吸引了我。华为强调‘以客户为中心’的理念，始终把客户需求放在第一位，这种客户至上的态度让我深受启发。同时，华为也注重员工的成长和发展，提供了丰富的培训机会和广阔的职业发展空间。我相信在华为工作，不仅能够提升我的技术能力，还能让我在职业道路上走得更远。</p><p>最后，我个人的职业规划与华为的发展方向高度契合。我希望能够在一家有远见卓识、勇于创新的企业中工作，华为正是这样一个理想的平台。在这里，我能够接触到最前沿的技术，参与有意义的项目，并且与优秀的团队一起成长。我相信，通过在华为的工作，我不仅能够实现个人的价值，还能为公司的发展贡献自己的力量。</p><h3 id="毕业一年在干吗" tabindex="-1">毕业一年在干吗 <a class="header-anchor" href="#毕业一年在干吗" aria-label="Permalink to &quot;毕业一年在干吗&quot;">​</a></h3><p>过去一年对我来说是一个充满学习和成长的过程，在去年下半年的备考期间，我系统地复习了计算机科学的基础知识。虽然考研未能成功，但我认为这段经历让我更加成熟，也让我更加明确了自己的职业方向。</p><p>在得知考研结果后，我没有气馁，而是迅速调整了心态，决定将这段时间用来提升自己的技术能力。我通过自学和实践，深入学习了Java编程语言及其相关的技术栈，包括Spring Boot、Spring Cloud、Docker等。此外，我还通过在线课程和书籍系统地学习了微服务架构的设计与实现。</p><p>为了将所学知识应用到实践中，我独立完成了一个分布式微服务项目。虽然这个项目尚未上线，但通过这个项目，我不仅巩固了所学的知识，还学会了如何解决实际开发中遇到的各种问题，并且对微服务架构有了深入的理解。</p><p>通过这段时间的学习和实践，我更加坚定了成为一名Java开发工程师的决心。我希望能够在华为这样的优秀平台上，与一群志同道合的同事一起工作，共同推动技术创新。我相信，通过不断的努力和学习，我能够在技术领域取得更大的成就。</p><p>总的来说，过去的一年对我来说是充实而富有意义的。虽然考研未能成功，但我通过这段时间的努力，不仅提升了技术能力，还积累了宝贵的实践经验。我希望能够在华为找到一份Java开发工程师的工作，为公司的发展贡献自己的力量。</p><h3 id="你的优势" tabindex="-1">你的优势 <a class="header-anchor" href="#你的优势" aria-label="Permalink to &quot;你的优势&quot;">​</a></h3><ul><li><strong>快速学习新技术</strong>：我对新技术保持着极大的热情，能够快速学习并掌握新的技术和工具。例如，我最近自学了Kubernetes，并将其应用于我的项目中，提高了系统的可维护性和扩展性。</li><li><strong>持续自我提升</strong>：即使在考研失利后，我也从未停止学习。通过在线课程和实战项目，我不断强化自己的技术能力，并且始终保持对技术前沿的关注。</li></ul><h3 id="校园经历" tabindex="-1">校园经历 <a class="header-anchor" href="#校园经历" aria-label="Permalink to &quot;校园经历&quot;">​</a></h3><p>在校期间我一直有在努力学习，上课认真听讲，这让我掌握了扎实的专业知识。在课余的时候我也会培养自己的兴趣爱好，比如篮球在这过程中也锻炼了我的团队协作能力以及人际交往能力。同时我也很注重自我提升，这方面我经常会通过一些阅读书籍来拓宽自己的视野。</p><h3 id="工作内容" tabindex="-1">工作内容 <a class="header-anchor" href="#工作内容" aria-label="Permalink to &quot;工作内容&quot;">​</a></h3><p>我了解到华为在行业内拥有卓越的声誉和领先的地位。目前我应聘的岗位主要是开发类。通过公司的官网和一些社交平台，我深切感受到华为对于创新和品质的不懈追求，这与我的职业价值观高度契合。</p><p>虽然我对具体的细节还没有完全了解，但我坚信，如果我有幸加入华为，我将以积极主动的态度迅速融入团队，并通过与同事的密切交流和实际操作，尽快全面掌握所从事工作的内容和所需的技能，为公司的发展贡献自己的力量。</p><h2 id="技术一面" tabindex="-1">技术一面 <a class="header-anchor" href="#技术一面" aria-label="Permalink to &quot;技术一面&quot;">​</a></h2><p>自我介绍</p><p>算法题<a href="https://leetcode.cn/problems/wtcaE1/" target="_blank" rel="noreferrer">LCR 016. 无重复字符的最长子串</a></p><ol><li><p>接口和抽象类</p></li><li><p>讲讲Set</p></li><li><p>HashMap讲讲、如何put、线程安全不</p></li><li><p>内存划分，存的啥、GC详细讲一下（什么是GC、有哪些算法、算法原理）、如何判断对象死亡</p></li><li><p>多线程怎么理解的（我说我在项目中的运用）、synchronized和Lock原理</p></li><li><p>static关键字</p></li></ol><h2 id="技术二面" tabindex="-1">技术二面 <a class="header-anchor" href="#技术二面" aria-label="Permalink to &quot;技术二面&quot;">​</a></h2><p>自我介绍</p><p>上来先问项目，后台管理系统介绍一下，项目来源、你干了啥、货物表有什么字段</p><p>听书类似，项目介绍、架构、有哪些模块，为什么用RabbitMQ，怎么用的，为什么用ES不用MySQL,两者区别，详细说一下搜索</p><ol><li>jdk和jre</li><li>==和equals</li><li>如何拼接字符串，为什么使用StringBuilder</li><li>new String(&quot;a&quot;) + new String(&quot;b&quot;)创建几个对象</li><li>IOC、AOP</li></ol><p>算法题</p><ul><li><a href="https://leetcode.cn/problems/find-number-of-ways-to-reach-the-k-th-stair/" target="_blank" rel="noreferrer">3154. 到达第 K 级台阶的方案数</a>没找到原题，类似这个，不一样的是只能走一阶或三阶，求总的方案数</li><li><a href="https://leetcode.cn/problems/7p8L0Z/" target="_blank" rel="noreferrer">LCR 084. 全排列 II </a></li><li>斐波那契递归and非递归写法</li><li>冒泡排序（问知道的排序算法，我说了冒泡、插入、选择、堆排、快排、归并）</li></ul><h2 id="主管面" tabindex="-1">主管面 <a class="header-anchor" href="#主管面" aria-label="Permalink to &quot;主管面&quot;">​</a></h2><h3 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h3><h2 id="简历" tabindex="-1">简历 <a class="header-anchor" href="#简历" aria-label="Permalink to &quot;简历&quot;">​</a></h2><h3 id="熟练使用-java-进行面向对象编程-具备良好的编程习惯" tabindex="-1">熟练使用 Java 进行面向对象编程，具备良好的编程习惯 <a class="header-anchor" href="#熟练使用-java-进行面向对象编程-具备良好的编程习惯" aria-label="Permalink to &quot;熟练使用 Java 进行面向对象编程，具备良好的编程习惯&quot;">​</a></h3><p>String不可变主要有两方面原因：一是它底层是一个私有的final的char数组，并且对外并未提供修改这个数组的方法；二是String类本身是一个final的，这样它就无法被继承，也就无法破坏String不可变</p><p>Java9之后，String底层是byte数组了，这样更加节省空间</p><p>StringBuilder是线程不安全的，而StringBuffer线程安全。在拼接字符串的时候，更推荐直接使用StringBuilder,使用“+”在底层还是使用StringBuilder的append方法。而在循环中，会创建多个StringBuilder。因此，直接使用StringBuilder可以减少对象的创建</p><p>new String会创建一个或两个对象，如果要创建的字符串在常量池中已经存在，那么只会创建一个对象，否则创建两个对象</p><p>String.intern是一个native方法，它的作用是将指定的字符串的引用保存在字符串常量池中</p><p>静态泛型方法是无法使用类上声明的泛型，这是由于静态泛型方法的加载先于类的实例化</p><h3 id="掌握-java-基础知识-熟悉集合体系-对-list、map-源码有一定了解-熟悉常用设计模式-包括但不限于单例模式、策略模式等" tabindex="-1">掌握 Java 基础知识，熟悉集合体系，对 List、Map 源码有一定了解；熟悉常用设计模式，包括但不限于单例模式、策略模式等 <a class="header-anchor" href="#掌握-java-基础知识-熟悉集合体系-对-list、map-源码有一定了解-熟悉常用设计模式-包括但不限于单例模式、策略模式等" aria-label="Permalink to &quot;掌握 Java 基础知识，熟悉集合体系，对 List、Map 源码有一定了解；熟悉常用设计模式，包括但不限于单例模式、策略模式等&quot;">​</a></h3><p>currenthashmap线程安全底层是使用Node数组+红黑树/链表，采用synchronized和CAS保证线程同步</p><p>hashmap初始容量16,扩容✖️2,当数组长度大于64且链表节点大于8转化为红黑树</p><h3 id="了解-jvm-内存分配-对堆和栈有一定了解-了解常用的gc-回收算法" tabindex="-1">了解 JVM 内存分配，对堆和栈有一定了解，了解常用的GC 回收算法 <a class="header-anchor" href="#了解-jvm-内存分配-对堆和栈有一定了解-了解常用的gc-回收算法" aria-label="Permalink to &quot;了解 JVM 内存分配，对堆和栈有一定了解，了解常用的GC 回收算法&quot;">​</a></h3><p>方法区：存放运行时常量池，已被虚拟机加载的类信息，常量等</p><p>堆：实例对象</p><p>本地方法栈：jvm调用的native方法</p><p>虚拟机栈：方法运行所需要的数据，局部变量表、操作数栈，方法返回地址</p><p>程序计数器：下一条指令地址</p><p>对象的创建：类加载检查、内存分配、初始化零值、设置对象头、调用init方法</p><p>标记清除、标记整理、复制、分代</p><p>加载（根据全类名获取二进制流）、验证（文件格式、符号引用）、准备（变量分配内存、初值）、解析（常量池符号引用替换为直接引用）、初始化（执行init）</p><h3 id="熟悉-juc-熟悉-synchronized、lock-接口、atomicinteger-等保证共享数据安全的方式-对线程池、cas-以及-completablefuture-多线程串并行有一定的理解" tabindex="-1">熟悉 JUC，熟悉 Synchronized、Lock 接口、AtomicInteger 等保证共享数据安全的方式，对线程池、CAS 以及 CompletableFuture 多线程串并行有一定的理解 <a class="header-anchor" href="#熟悉-juc-熟悉-synchronized、lock-接口、atomicinteger-等保证共享数据安全的方式-对线程池、cas-以及-completablefuture-多线程串并行有一定的理解" aria-label="Permalink to &quot;熟悉 JUC，熟悉 Synchronized、Lock 接口、AtomicInteger 等保证共享数据安全的方式，对线程池、CAS 以及 CompletableFuture 多线程串并行有一定的理解&quot;">​</a></h3><p>synchronized代码块的原理是monitorenter和monitorexit两个指令，synchronized方法的原理是ACC_SYNCHRONIZED标识位，当方法拥有该标识时，会获取一个monitor</p><p>lock底层是通过aqs框架，它提供了一个共享资源的状态，以及一组标准的同步队列来管理线程的等待和唤醒，同时，它使用了CAS来修改AQS中的状态</p><p>atomic中的变量基本是volatile的，这样保证了它在多线程环境下的内存可见性，同时，它的实现基于unsafe类中的本地方法，而这些方法具有对底层硬件的直接访问能力，从而实现了原子操作</p><p>在jmm内存模型中，主要分为主内存和工作内存，其中主内存是所有线程共有的，在没有volatile的情况下，所有线程可能会缓存共享变量的副本，并且只有在特定条件下才会刷入主内存，那么这就有可能导致其他线程看到的是过期数据。而带有volatile的变量在写之后，会立即将改动写回主内存，并且在读之前，先从主内存获取变量最新的值。volatile还用来保证内存可见性和禁止指令重排，从汇编和jvm层面来说，通过针对volatile的内存屏障，可以避免指令重排</p><p>线程池有线程池管理、线程工厂、工作队列和任务执行器四个重要部分，常见的创建线程池类型有：固定大小的线程池、根据需要创建新线程的线程池、可以定时或周期性执行任务的线程池、只包含一个线程的线程池以及自定义线程池</p><p>线程池的参数：核心线程数，对于cpu密集型通常设置为cpu核数+1,对于io密集型，适当大于cpu核数；最大线程数，可通过压测结果确定；非核心线程空闲时间；时间单位；工作队列：有界队列、无界队列和不存储元素的阻塞队列；线程工厂；拒绝策略：抛异常（默认）、由调用execute的线程来执行、直接丢弃、丢弃最旧的任务并再次尝试</p><p>cas涉及三个参数：内存位置v,期望值a,新值b,如果v的值等于a,则将v的值更新为b,不等则不作操作</p><p>cas存在的问题：aba,改了又改回去（版本号）、循环时间开销，多线程竞争导致自旋（限制自旋次数，到了一定次数，改用其他同步机制）、只能保证一个变量的原子操作（使用复合原子类或锁机制）</p><h3 id="熟练使用-mysql-的常用操作-sql-编写-锁及索引机制-掌握explain-sql-诊断和性能分析策略-了解-mysql-的-innodb-存储引擎的特性" tabindex="-1">熟练使用 MySQL 的常用操作，SQL 编写，锁及索引机制；掌握Explain SQL 诊断和性能分析策略，了解 MySQL 的 InnoDB 存储引擎的特性 <a class="header-anchor" href="#熟练使用-mysql-的常用操作-sql-编写-锁及索引机制-掌握explain-sql-诊断和性能分析策略-了解-mysql-的-innodb-存储引擎的特性" aria-label="Permalink to &quot;熟练使用 MySQL 的常用操作，SQL 编写，锁及索引机制；掌握Explain SQL 诊断和性能分析策略，了解 MySQL 的 InnoDB 存储引擎的特性&quot;">​</a></h3><p>表锁、行锁、间隙锁</p><p>普通索引、唯一索引、主键索引、全文索引，非聚簇索引需要单独存放数据行</p><p>哈希不适合范围查询和排序场景、二叉查找树可能出现偏向一边情况、avl可能高度过高，磁盘io次数过多、b树所有节点既存放数据也存放键，而b+树只有叶子节点才这样，非叶子节点只存放key，b树叶子节点都是独立的，而b+树之间是双向链表</p><p>redolog + binlog保证持久性、undolog保证原子性、mvcc保证隔离性</p><p>为避免redolog和binlog不一致，redolog有两阶段提交，当redolog处于prepare阶段，并且没有binlog就会回滚</p><p>读未提交、读已提交、可重复读（默认）、串行化</p><p>innodb支持事务（acid、mvcc、回滚）、行锁、外键、奔溃恢复</p><p>性能分析策略：优化查询、避免全表扫描、优化join</p><p>explain：id越大优先级越高、selecttype、table、type（尽量在ref以上，const.system）、possiblekey（可能使用的索引）、key（实际使用的索引）、keylen（使用的索引字节数）、ref（与哪些索引列匹配）、rows（越小越好）</p><h3 id="熟练使用-redis-了解常用数据结构的特点及使用场景-数据的持久化以及主从复制" tabindex="-1">熟练使用 Redis，了解常用数据结构的特点及使用场景，数据的持久化以及主从复制 <a class="header-anchor" href="#熟练使用-redis-了解常用数据结构的特点及使用场景-数据的持久化以及主从复制" aria-label="Permalink to &quot;熟练使用 Redis，了解常用数据结构的特点及使用场景，数据的持久化以及主从复制&quot;">​</a></h3><p>string（会话信息）、hash（用户资料）、list（消息队列）、set（好友列表黑名单）、zset（排行榜）</p><p>rdb，全量备份、二进制存储，文件小，恢复速度快，可能会丢失</p><p>aof，增量备份、可人为恢复，文件大，恢复慢</p><p>快：基于内存、单线程+io多路复用、内置数据结构优化、通信协议高效简单</p><h3 id="熟练使用-spring、springmvc-和-mybatis-进行整合开发-理解spring-的ioc和aop编程思想-熟悉-springmvc-的运行流程和-mybatis-plus-对单表的使用" tabindex="-1">熟练使用 Spring、SpringMVC 和 MyBatis 进行整合开发；理解Spring 的IOC和AOP编程思想；熟悉 SpringMVC 的运行流程和 MyBatis-Plus 对单表的使用 <a class="header-anchor" href="#熟练使用-spring、springmvc-和-mybatis-进行整合开发-理解spring-的ioc和aop编程思想-熟悉-springmvc-的运行流程和-mybatis-plus-对单表的使用" aria-label="Permalink to &quot;熟练使用 Spring、SpringMVC 和 MyBatis 进行整合开发；理解Spring 的IOC和AOP编程思想；熟悉 SpringMVC 的运行流程和 MyBatis-Plus 对单表的使用&quot;">​</a></h3><p>请求来到dispatchservlet,servlet转发到handlermapping，handler找到对应的处理器返回给servlet,servlet将其交给handleradapter,adapter选择合适的适配器来执行这个处理器，处理完后，返回一个modelandview对象，servlet拿着这个对象给viewresolver,viewresolver将物理视图解析成逻辑视图view,渲染view后servlet返回给用户</p><h3 id="掌握-springboot-springcloud-微服务架构-使用过-spring-cloud-alibaba-nacos、gateway、openfeign-等组件-理解-springboot-自动配置原理" tabindex="-1">掌握 SpringBoot + SpringCloud 微服务架构，使用过 Spring Cloud Alibaba Nacos、Gateway、OpenFeign 等组件；理解 SpringBoot 自动配置原理 <a class="header-anchor" href="#掌握-springboot-springcloud-微服务架构-使用过-spring-cloud-alibaba-nacos、gateway、openfeign-等组件-理解-springboot-自动配置原理" aria-label="Permalink to &quot;掌握 SpringBoot + SpringCloud 微服务架构，使用过 Spring Cloud Alibaba Nacos、Gateway、OpenFeign 等组件；理解 SpringBoot 自动配置原理&quot;">​</a></h3><h3 id="熟练使用-rabbitmq-消息中间件-了解-rabbitmq-的消息确认机制和延迟队列的应用" tabindex="-1">熟练使用 RabbitMQ 消息中间件，了解 RabbitMQ 的消息确认机制和延迟队列的应用 <a class="header-anchor" href="#熟练使用-rabbitmq-消息中间件-了解-rabbitmq-的消息确认机制和延迟队列的应用" aria-label="Permalink to &quot;熟练使用 RabbitMQ 消息中间件，了解 RabbitMQ 的消息确认机制和延迟队列的应用&quot;">​</a></h3><h3 id="熟悉-linux-常用命令和-docker-容器的简单使用" tabindex="-1">熟悉 Linux 常用命令和 Docker 容器的简单使用 <a class="header-anchor" href="#熟悉-linux-常用命令和-docker-容器的简单使用" aria-label="Permalink to &quot;熟悉 Linux 常用命令和 Docker 容器的简单使用&quot;">​</a></h3><h3 id="熟练使用-idea-开发工具-以及-git、maven-等项目管理工具和数据库可视化工具navicat等" tabindex="-1">熟练使用 IDEA 开发工具，以及 Git、Maven 等项目管理工具和数据库可视化工具Navicat等 <a class="header-anchor" href="#熟练使用-idea-开发工具-以及-git、maven-等项目管理工具和数据库可视化工具navicat等" aria-label="Permalink to &quot;熟练使用 IDEA 开发工具，以及 Git、Maven 等项目管理工具和数据库可视化工具Navicat等&quot;">​</a></h3>',95),l=[o];function n(p,s,h,d,c,b){return i(),e("div",null,l)}const g=a(t,[["render",n]]);export{m as __pageData,g as default};
