import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.BBnPlPAH.js";const t="/assets/image-20220210184303827.BwvIiz81.png",e="/assets/image-20220210184403006.D7N7hOmB.png",p="/assets/image-20220210184616962.A32HFkXC.png",l="/assets/image-20220210184825788.CdpWQ-l1.png",h="/assets/image-20220210185041570.CTIrfrS0.png",k="/assets/image-20220210185209484.DD_fWPZv.png",r="/assets/image-20220210185335355.DMRWa4_9.png",A=JSON.parse('{"title":"Spring注解驱动开发【源码】——BeanDefinitionRegistryPostProcessor","description":"","frontmatter":{"title":"Spring注解驱动开发【源码】——BeanDefinitionRegistryPostProcessor","date":"2022-02-08T21:58:47.000Z","tags":null},"headers":[],"relativePath":"spring/annotation/22-BeanDefinitionRegistryPostProcessor.md","filePath":"spring/annotation/22-BeanDefinitionRegistryPostProcessor.md","lastUpdated":1729870203000}'),o={name:"spring/annotation/22-BeanDefinitionRegistryPostProcessor.md"},g=n('<p>再来讲一下BeanFactoryPostProcessor下的一个子接口：BeanDefinitionRegistryPostProcessor</p><p><img src="'+t+'" alt="image-20220210184303827"></p><p>同样的，我们可以从它方法的注释上看到：它是在所有bean定义信息将要被加载，bean实例还未创建的时候执行！也就是说，它会优先于BeanFactoryPostProcessor执行。</p><p><img src="'+e+`" alt="image-20220210184403006"></p><p>我们自己写一个BeanDefinitionRegistryPostProcessor调试看一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.atqingke.ext;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.atqingke.bean.Car;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.support.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Author pengbin007</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Date 2022/2/10 17:02</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyBeanDefinitionRegistryPostProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanDefinitionRegistryPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> registry</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> bean信息的保存中心，以后BeanFactory就是按照BeanDefinitionRegistry里面保存的每一个bean定义信息创建bean实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> postProcessBeanDefinitionRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanDefinitionRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postProcessBeanDefinitionRegistry执行！bean的数量：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanDefinitionCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        RootBeanDefinition beanDefinition = new RootBeanDefinition(Car.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AbstractBeanDefinition beanDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeanDefinitionBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rootBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Car.class).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, beanDefinition);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> postProcessBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConfigurableListableBeanFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postProcessBeanFactory执行！bean的数量：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanDefinitionCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同样的，我们从它加载配置文件出发：</p><p><img src="`+p+'" alt="image-20220210184616962"></p><p>同样的，它也会来到我们的invokeBeanFactoryPostProcessors方法：</p><p><img src="'+l+'" alt="image-20220210184825788"></p><p>我们进去，来到我们熟悉的invokeBeanFactoryPostProcessors方法，可以看到，它会在122行执行关于我们的BeanDefinitionRegistryPostProcessor的逻辑：</p><p><img src="'+h+'" alt="image-20220210185041570"></p><p>然后，在127行执行我们在BeanDefinitionRegistryPostProcessor重写的关于BeanFactoryPostProcessor中的postProcessBeanFactory逻辑</p><p><img src="'+k+'" alt="image-20220210185209484"></p><p>最后，会在178行执行我们在BeanFactoryPostProcessor中的postProcessBeanFactory逻辑。</p><p><img src="'+r+'" alt="image-20220210185335355"></p><p>也就是说，BeanDefinitionRegistryPostProcessor优先于BeanFactoryPostProcessor执行，我们可以利用BeanDefinitionRegistryPostProcessor给容器中再额外添加一些组件。</p>',17),E=[g];function c(y,d,D,F,B,m){return a(),i("div",null,E)}const f=s(o,[["render",c]]);export{A as __pageData,f as default};
