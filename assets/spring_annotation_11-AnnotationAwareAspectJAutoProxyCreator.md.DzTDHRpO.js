import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.BAO6c_AF.js";const t="/java/assets/image-20220206200649652.BzkEB-60.png",e="/java/assets/image-20220206200934054.Baui_Zac.png",p="/java/assets/image-20220206201438182.CKt_O7Pu.png",l="/java/assets/image-20220206201600858.DeN3SJbe.png",h="/java/assets/image-20220206201801692.VssWwtT5.png",k="/java/assets/image-20220206202841315.CBdAQDgc.png",r="/java/assets/image-20220206203126272.B87DDwzB.png",E="/java/assets/image-20220206203256817.DjjB_FR-.png",o="/java/assets/image-20220206203404286.BOUx4xDP.png",d="/java/assets/image-20220206203648006.RFBKRi3W.png",g="/java/assets/image-20220206205140594.B8bbQsri.png",y="/java/assets/image-20220206205814466.B53oRelP.png",c="/java/assets/image-20220206205917271.Cn3CryMm.png",F="/java/assets/image-20220206210226933.CzEULZxd.png",A="/java/assets/image-20220206210748210.pWhh5mfX.png",P="/java/assets/image-20220206212204071.BEYSnTNP.png",B="/java/assets/image-20220207185038044.XZ4i9jgY.png",b="/java/assets/image-20220207190004959.DrPwuPsJ.png",D="/java/assets/image-20220207190520050.B2SkBNqy.png",m="/java/assets/image-20220207192026939.BgqYPirW.png",T=JSON.parse('{"title":"Spring注解驱动开发【源码】——AOP原理——AnnotationAwareAspectJAutoProxyCreator","description":"","frontmatter":{"title":"Spring注解驱动开发【源码】——AOP原理——AnnotationAwareAspectJAutoProxyCreator","date":"2022-02-06T11:42:40.000Z","tags":null},"headers":[],"relativePath":"spring/annotation/11-AnnotationAwareAspectJAutoProxyCreator.md","filePath":"spring/annotation/11-AnnotationAwareAspectJAutoProxyCreator.md","lastUpdated":1729870203000}'),C={name:"spring/annotation/11-AnnotationAwareAspectJAutoProxyCreator.md"},u=n('<h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>通过前面我们知道：@EnableAspectJAutoProxy注解就是为了给容器中注册一个AnnotationAwareAspectJAutoProxyCreator，我们先来看一下它的继承树：</p><p><img src="'+t+'" alt="image-20220206200649652"></p><p>通过这个继承树以及源码中我们可以看到，在AbstractAutoProxyCreator中，实现了SmartInstantiationAwareBeanPostProcessor和BeanFactoryAware两个接口。而我们知道：xxxAwareBeanPostProcessor是后置处理器（也就是bean初始化前后做的事），BeanFactoryAware用于自动装配。</p><p><img src="'+e+'" alt="image-20220206200934054"></p><p>我们一层一层去看都有哪些需要我们去关注的方法。在AbstractAutoProxyCreator中，我们重点是这些postProcess方法，可以为这些有实现的方法打上断点：</p><p><img src="'+p+'" alt="image-20220206201438182"></p><p>在AbstractAdvisorAutoProxyCreator中，有一个setBeanFactory方法毫无疑问是用来自动装配的，我们可以打上断点：</p><p><img src="'+l+'" alt="image-20220206201600858"></p><p>AspectJAwareAdvisorAutoProxyCreator中并没有跟后置处理器和自动装配有关的方法，可以跳过。</p><p>在AnnotationAwareAspectJAutoProxyCreator中有一个initBeanFactory是用来初始化BeanFactory的，我们也可以给它打上断点：</p><p><img src="'+h+'" alt="image-20220206201801692"></p><p>最后，我们给配置类中注册两个bean打上断点：</p><p><img src="'+k+'" alt="image-20220206202841315"></p><h2 id="注册-annotationawareaspectjautoproxycreator" tabindex="-1">注册 AnnotationAwareAspectJAutoProxyCreator <a class="header-anchor" href="#注册-annotationawareaspectjautoproxycreator" aria-label="Permalink to &quot;注册 AnnotationAwareAspectJAutoProxyCreator&quot;">​</a></h2><p>Debug运行，来到第一个断点处，是我们的AbstractAdvisorAutoProxyCreator中的setBeanFactory方法：</p><p><img src="'+r+'" alt="image-20220206203126272"></p><p>我们从我们的test方法开始，看看经历了哪些流程！</p><p>首先是传入配置类，创建IOC容器：</p><p><img src="'+E+'" alt="image-20220206203256817"></p><p>然后是注册配置类，调用refresh()方法刷新容器：</p><p><img src="'+o+'" alt="image-20220206203404286"></p><p>在refresh中，来到第528行的registerBeanPostProcessors(beanFactory); 在这里面注册bean的后置处理器以方便拦截bean的创建：</p><p><img src="'+d+`" alt="image-20220206203648006"></p><p>我们进入registerBeanPostProcessors方法看看：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// ① 先获取IOC容器中已经定义了的需要创建对象的所有BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] postProcessorNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanNamesForType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanPostProcessor.class, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ② 给容器中加别的BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Register BeanPostProcessorChecker that logs an info message when</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a bean is created during BeanPostProcessor instantiation, i.e. when</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a bean is not eligible for getting processed by all BeanPostProcessors.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanProcessorTargetCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanPostProcessorCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postProcessorNames.length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanPostProcessorChecker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanFactory, beanProcessorTargetCount));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Separate between BeanPostProcessors that implement PriorityOrdered,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Ordered, and the rest.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; priorityOrderedPostProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; internalPostProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; orderedPostProcessorNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; nonOrderedPostProcessorNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String ppName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postProcessorNames) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTypeMatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName, PriorityOrdered.class)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            BeanPostProcessor pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName, BeanPostProcessor.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            priorityOrderedPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MergedBeanDefinitionPostProcessor) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                internalPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTypeMatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName, Ordered.class)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            orderedPostProcessorNames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ⑤ 注册没实现优先级接口的BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            nonOrderedPostProcessorNames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ③ 优先注册实现了PriorityOrdered接口的BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // First, register the BeanPostProcessors that implement PriorityOrdered.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sortPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(priorityOrderedPostProcessors, beanFactory);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    registerBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanFactory, priorityOrderedPostProcessors);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ④ 再给容器中注册实现了Ordered接口的BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Next, register the BeanPostProcessors that implement Ordered.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; orderedPostProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String ppName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderedPostProcessorNames) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BeanPostProcessor pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName, BeanPostProcessor.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        orderedPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MergedBeanDefinitionPostProcessor) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            internalPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sortPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(orderedPostProcessors, beanFactory);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    registerBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanFactory, orderedPostProcessors);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ⑤ 注册没实现优先级接口的BeanPostProcessor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Now, register all regular BeanPostProcessors.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; nonOrderedPostProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String ppName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonOrderedPostProcessorNames) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BeanPostProcessor pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ppName, BeanPostProcessor.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        nonOrderedPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MergedBeanDefinitionPostProcessor) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            internalPostProcessors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    registerBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanFactory, nonOrderedPostProcessors);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Finally, re-register all internal BeanPostProcessors.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sortPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(internalPostProcessors, beanFactory);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    registerBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanFactory, internalPostProcessors);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Re-register post-processor for detecting inner beans as ApplicationListeners,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // moving it to the end of the processor chain (for picking up proxies etc).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationListenerDetector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(applicationContext));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而我们的AnnotationAwareAspectJAutoProxyCreator通过前面的继承树可以看到，它是实现了Ordered接口的，因此它会走Next注册：</p><p><img src="`+g+'" alt="image-20220206205140594"></p><blockquote><p>ps：注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中。也就是创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】。之前是将AnnotationAwareAspectJAutoProxyCreator的定义信息赋给了internalAutoProxyCreator，现在就通过internalAutoProxyCreator中的BeanDefinition来创建AnnotationAwareAspectJAutoProxyCreator。</p></blockquote><p>现在我们来到了红色框中的部分准备获取bean，而我们的bean还没有创建好，因此要先去创建bean，因此来到白色框部分：</p><p><img src="'+y+'" alt="image-20220206205814466"></p><p>在doCreateBean中，首先会创建bean的实例：</p><p><img src="'+c+'" alt="image-20220206205917271"></p><p>在给bean初始化之前，还有一步populateBean()来给bean的各种属性赋值：</p><p><img src="'+F+`" alt="image-20220206210226933"></p><p>赋好值后再通过initializeBean()初始化bean。</p><p>现在来到initializeBean中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initializeBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object bean, RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSecurityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AccessController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doPrivileged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PrivilegedAction&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                invokeAwareMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, bean);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAccessControlContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ①处理Aware接口的方法回调</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        invokeAwareMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, bean);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object wrappedBean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mbd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSynthetic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ②应用后置处理器的postProcessorBeforeInitialization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wrappedBean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyBeanPostProcessorsBeforeInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ③执行自定义的初始化方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        invokeInitMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, wrappedBean, mbd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanCreationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (mbd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            beanName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invocation of init method failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mbd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSynthetic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ④执行后置处理器的postProcessorsAfterInitialization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wrappedBean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyBeanPostProcessorsAfterInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrappedBean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>经过这一系列操作之后，我们的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】就创建成功了！</p><p>创建好之后，会将BeanPostProcessor注册到BeanFactory中：</p><p><img src="`+A+`" alt="image-20220206210748210"></p><p>最后来到了我们分析的AbstractAdvisorAutoProxyCreator中setBeanFactory方法。</p><blockquote><p>创建和注册AnnotationAwareAspectJAutoProxyCreator的过程总结：</p><ul><li><pre><code> 1、 传入配置类，创建IOC容器
</code></pre></li><li><pre><code> 2、 注册配置类，调用refresh()刷新容器
</code></pre></li><li><pre><code> 3、 registerBeanPostProcessors(beanFactory); 注册bean的后置处理器来方便拦截bean的创建
  *          ① 先获取IOC容器中已经定义了的需要创建对象的所有BeanPostProcessor
  *          ② 给容器中加别的BeanPostProcessor
  *          ③ 优先注册实现了PriorityOrdered接口的BeanPostProcessor
  *          ④ 再给容器中注册实现了Ordered接口的BeanPostProcessor
  *          ⑤ 注册没实现优先级接口的BeanPostProcessor
  *      ⑥ 注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中
          *              创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】
          *              1、创建bean的实例
          *              2、populateBean 给bean的各种属性赋值
          *      3、initializeBean 初始化bean
                  *                  ① invokeAwareMethods() 处理Aware接口的方法回调
                  *                  ② applyBeanPostProcessorsBeforeInitialization() 应用后置处理器的postProcessorBeforeInitialization
                  *                  ③ invokeInitMethods 执行自定义的初始化方法
                  *                  ④ applyBeanPostProcessorsAfterInitialization 执行后置处理器的postProcessorsAfterInitialization
</code></pre></li><li><pre><code> 4、BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】创建成功
  *          ⑦ 把BeanPostProcessor注册到BeanFactory中
  *              beanFactory.addBeanPostProcessor(postProcessor);
</code></pre></li></ul></blockquote><h2 id="annotationawareaspectjautoproxycreator-执行时机" tabindex="-1">AnnotationAwareAspectJAutoProxyCreator 执行时机 <a class="header-anchor" href="#annotationawareaspectjautoproxycreator-执行时机" aria-label="Permalink to &quot;AnnotationAwareAspectJAutoProxyCreator 执行时机&quot;">​</a></h2><p>通过前面的介绍，我们知道了创建和注册AnnotationAwareAspectJAutoProxyCreator的过程。下面来看一下AnnotationAwareAspectJAutoProxyCreator作为后置处理器做了什么。</p><p>我们一路放行到下一个断点，来到postProcessBeforeInstantiation断点处：</p><p><img src="`+P+'" alt="image-20220206212204071"></p><blockquote><p>ps：需要注意的是，这里是Instantiation，并不是BeanPostProcessor中的postProcessBeforeInitialization。通过继承树也可以看到，SmartInstantiationAwareBeanPostProcessor实现的是InstantiationAwareBeanPostProcessor。</p></blockquote><p><img src="'+B+'" alt="image-20220207185038044"></p><p>在finishBeanFactoryInitialization中，会完成BeanFactory初始化工作，并创建剩下的单实例bean。</p><p>首先，会遍历获取容器中所有的bean，依次创建对象getBean(beanName)：</p><p><img src="'+b+'" alt="image-20220207190004959"></p><p>在getBean中，按照“getBean-&gt;doGetBean-&gt;getSingleton”先尝试获取单实例bean，获取失败，就会去创建bean。</p><blockquote><p>ps：要注意的是，我们之前创建好的AnnotationAwareAspectJAutoProxyCreator会在所有bean创建之前有一个拦截，InstantiationAwareBeanPostProcessor，会调用postProcessBeforeInstantiation：</p><p><img src="'+D+'" alt="image-20220207190520050"></p></blockquote><p>在创建bean的时候，会先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用；否则再创建（只要创建好的bean都会被缓存起来）。</p><p><img src="'+m+`" alt="image-20220207192026939"></p><p>然后才会来到我们的createBean方法创建bean：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String beanName, RootBeanDefinition mbd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) throws BeanCreationException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Creating instance of bean &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   RootBeanDefinition mbdToUse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mbd;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Make sure bean class is actually resolved at this point, and</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // clone the bean definition in case of a dynamically resolved Class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // which cannot be stored in the shared merged bean definition.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; resolvedClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveBeanClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd, beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (resolvedClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasBeanClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeanClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mbdToUse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RootBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mbdToUse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBeanClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolvedClass);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Prepare method overrides.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mbdToUse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareMethodOverrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BeanDefinitionValidationException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanDefinitionStoreException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbdToUse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            beanName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Validation of method overrides failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveBeforeInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbdToUse);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanCreationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbdToUse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), beanName,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;BeanPostProcessor before instantiation of bean failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Object beanInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doCreateBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbdToUse, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Finished creating instance of bean &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanInstance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在createBean中，我们重点关注两个地方：</p><ul><li>resolveBeforeInstantiation(beanName, mbdToUse);</li><li>doCreateBean(beanName, mbdToUse, args);</li></ul><p>resolveBeforeInstantiation就是解析BeforeInstantiation的，通过它上面的注释可以知道“它希望后置处理器在此能返回一个代理对象”，如果能返回一个代理对象就用；如果不能就继续。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveBeforeInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String beanName, RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 后置处理器先尝试返回对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Boolean.FALSE.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd.beforeInstantiationResolved)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Make sure bean class is actually resolved at this point.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSynthetic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasInstantiationAwareBeanPostProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; targetType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> determineTargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (targetType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor，就执行postProcessBeforeInstantiation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyBeanPostProcessorsBeforeInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targetType, beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyBeanPostProcessorsAfterInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bean, beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mbd.beforeInstantiationResolved </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而doCreateBean我们在上面已经进入过了，流程就和上面总结的“注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中”这一步一样了。</p><blockquote><p>这一段流程总结下来就是：</p><ul><li><p>4、finishBeanFactoryInitialization(beanFactory); 完成BeanFactory初始化工作，创建剩下的单实例bean</p><ul><li><p>Ⅰ 遍历获取容器中所有的Bean，依次创建对象getBean(beanName)</p><ul><li>getBean-&gt;doGetBean-&gt;getSingleton</li></ul></li><li><p>Ⅱ 创建bean</p><p>【AnnotationAwareAspectJAutoProxyCreator再所有bean创建之前会有一个拦截，InstantiationAwareBeanPostProcessor，会调用postProcessBeforeInstantiation】</p></li><li><p>① 先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用；否则再创建。</p><ul><li>只要创建好的bean都会被缓存起来</li></ul></li><li><p>② createBean(); 创建bean AnnotationAwareAspectJAutoProxyCreator会在任何bean创建之前先尝试返回bean实例</p><ul><li>【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】</li><li>【InstantiationAwareBeanPostProcessor是在创建Bean实例之前先尝试用后置处理器返回对象的】</li><li>1、resolveBeforeInstantiation(beanName, mbdToUse); 解析BeforeInstantiation <ul><li>希望后置处理器在此能返回一个代理对象，如果能返回代理对象就是用；如果不能就继续</li><li>Ⅰ后置处理器先尝试返回对象</li><li>bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</li><li>拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor</li><li>就执行postProcessBeforeInstantiation</li><li>if (bean != null) {</li><li>bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</li><li>}</li></ul></li><li>2、doCreateBean(beanName, mbdToUse, args); 真正的去创建一个bean实例，和3.6流程一样</li></ul></li></ul></li></ul></blockquote>`,64),f=[u];function v(w,x,_,N,I,j){return a(),i("div",null,f)}const q=s(C,[["render",v]]);export{T as __pageData,q as default};
