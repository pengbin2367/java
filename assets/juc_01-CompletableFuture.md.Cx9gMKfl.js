import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.BBnPlPAH.js";const o=JSON.parse('{"title":"CompletableFuture","description":"","frontmatter":{},"headers":[],"relativePath":"juc/01-CompletableFuture.md","filePath":"juc/01-CompletableFuture.md","lastUpdated":1729870203000}'),l={name:"juc/01-CompletableFuture.md"},e=t(`<h1 id="completablefuture" tabindex="-1">CompletableFuture <a class="header-anchor" href="#completablefuture" aria-label="Permalink to &quot;CompletableFuture&quot;">​</a></h1><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompletableFuture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CompletionStage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></blockquote><p>在Java8中，CompletableFuture提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程，并提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转化和组合CompletableFuture的方法</p><p>它可能代表一个明确完成的Future,也可能代表一个完成阶段，它支持在计算完成以后触发一些函数或执行某些动作</p><h2 id="四大静态方法" tabindex="-1">四大静态方法 <a class="header-anchor" href="#四大静态方法" aria-label="Permalink to &quot;四大静态方法&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Runnable runnable)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Runnable runnable, Executor executor)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supplyAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Supplier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> supplier)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supplyAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Supplier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> supplier, Executor executor)</span></span></code></pre></div><p>runAsync无返回值，适用于异步任务的一个单节点分支；而suppleAsync是有返回值的，适用于在一个异步任务的多节点分支上的起始节点。两者都还有一个接收线程池参数的重载方法，我们可以传入自定义的线程池。如果未指定Executor,默认使用Fork.JoinPool.commonPool</p><p>CompletableFuture优点：</p><ul><li>异步任务结束时，会自动回调某个对象的方法</li><li>主线程设置好回调后，不再关心异步任务的执行，异步任务之间可以顺序执行</li><li>异步任务出错时，会自动回调某个对象的方法</li></ul>`,9),h=[e];function p(n,k,r,d,E,u){return a(),i("div",null,h)}const c=s(l,[["render",p]]);export{o as __pageData,c as default};
