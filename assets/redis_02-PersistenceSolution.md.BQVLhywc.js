import{_ as n,D as t,c as l,j as s,a,I as p,w as d,a5 as e,o}from"./chunks/framework.BBnPlPAH.js";const C=JSON.parse('{"title":"Redis持久化解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"redis/02-PersistenceSolution.md","filePath":"redis/02-PersistenceSolution.md","lastUpdated":1729870203000}'),r={name:"redis/02-PersistenceSolution.md"},h=e(`<h1 id="redis持久化解决方案" tabindex="-1">Redis持久化解决方案 <a class="header-anchor" href="#redis持久化解决方案" aria-label="Permalink to &quot;Redis持久化解决方案&quot;">​</a></h1><h2 id="rdb" tabindex="-1">RDB <a class="header-anchor" href="#rdb" aria-label="Permalink to &quot;RDB&quot;">​</a></h2><p>在指定的时间间隔内，将内存中的数据集快照写入磁盘的<code>dump.rdb</code>文件</p><p>:::code-groups</p><div class="language-redis vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">redis</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 15min 1</span></span>
<span class="line"><span># 5min 	100</span></span>
<span class="line"><span># 1min 	10000</span></span></code></pre></div><div class="language-redis vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">redis</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 60min 1</span></span>
<span class="line"><span># 5min 	100</span></span>
<span class="line"><span># 1min 	10000</span></span></code></pre></div><p>:::</p><h3 id="redis-conf" tabindex="-1">Redis.conf <a class="header-anchor" href="#redis-conf" aria-label="Permalink to &quot;Redis.conf&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将时间间隔修改为5秒内修改两次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将dump文件位置修改为/myredis/dumpfiles 【文件夹需要提前创建好】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /myredis/dumpfiles</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定dump文件名为dump6379.rdb 【主要服务于集群模式】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dbfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dump6379.rdb</span></span></code></pre></div><h3 id="自动触发" tabindex="-1">自动触发 <a class="header-anchor" href="#自动触发" aria-label="Permalink to &quot;自动触发&quot;">​</a></h3><p>按照配置文件中的save、dir和dbfilename生成dump文件</p><h3 id="被动触发" tabindex="-1">被动触发 <a class="header-anchor" href="#被动触发" aria-label="Permalink to &quot;被动触发&quot;">​</a></h3>`,12),c=s("code",null,"save",-1),u=s("code",null,"bgsave",-1),k=e('<p>总的来说，有以下五种情况会触发RDB快照：</p><ol><li>配置文件中的快照配置</li><li>save/bgsave指令</li><li>flushall/flushdb（这种情况产生的只是一个空白的快照）</li><li>shutdown指令&amp;未开启AOF</li><li>主从复制时，主节点自动触发</li></ol><h2 id="aof" tabindex="-1">AOF <a class="header-anchor" href="#aof" aria-label="Permalink to &quot;AOF&quot;">​</a></h2><p>通过记录服务器更改命令的操作日志，来实现持久化（以追加的形式记录）</p><h3 id="写回策略" tabindex="-1">写回策略 <a class="header-anchor" href="#写回策略" aria-label="Permalink to &quot;写回策略&quot;">​</a></h3><p>Always：每次；精准</p><p>Everysec：每秒；丢失一秒数据</p><p>No：操作系统控制；可能丢失大量数据</p><h2 id="rdb-aof" tabindex="-1">RDB + AOF <a class="header-anchor" href="#rdb-aof" aria-label="Permalink to &quot;RDB + AOF&quot;">​</a></h2><p>rdb文件是紧凑的二进制表示，相比于aof，在恢复时速度更快，并且可以进行文件压缩，占用磁盘空间小。但是实时性比较差，并且由于fork是在主进程进程，会降低Redis性能</p><p>aof具有更好的持久性，数据也更准确，并且文件是可阅读的Redis操作指令，可以人为修补。但是文件体积非常大，每次写指令都要追加，并且恢复速度相对较慢</p><p>因此可以采用RDB + AOF的方式，RDB进行全量备份，AOF进行增量备份</p>',12);function _(b,m,f,g,v,F){const i=t("font");return o(),l("div",null,[h,s("p",null,[c,a("和"),u,a("命令都可以触发，但我们只能使用"),p(i,{style:{color:"red","font-weight":"bold","font-size":"24px"}},{default:d(()=>[a("bgsave")]),_:1}),a("（这是由于save指令在高并发情况下会阻塞当前Redis服务器，直到dump操作完成）")]),k])}const A=n(r,[["render",_]]);export{C as __pageData,A as default};
