import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.BAO6c_AF.js";const t="/java/assets/image-20240813222250693.BAVXmaQl.png",l="/java/assets/image-20240814110546160.D7qx4kzk.png",F=JSON.parse('{"title":"Redis 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"redis/01-BasicDataTypes.md","filePath":"redis/01-BasicDataTypes.md","lastUpdated":1729870203000}'),h={name:"redis/01-BasicDataTypes.md"},n=e('<h1 id="redis-数据类型" tabindex="-1">Redis 数据类型 <a class="header-anchor" href="#redis-数据类型" aria-label="Permalink to &quot;Redis 数据类型&quot;">​</a></h1><p>详情参见官网 <a href="https://redis.io/docs/latest/develop/data-types/" target="_blank" rel="noreferrer">Understand Redis data types</a></p><p>在 Redis 中，命令是不区分大小的，但是 key 是区分大小写的。我们可以通过 <a href="https://redis.io/docs/latest/commands/" target="_blank" rel="noreferrer">官网-Commands</a> 来查看命令的使用，也可以在 <code>redis-cli</code> 中使用命令 <code>help @数据类型</code> 获得帮助：</p><p><img src="'+t+`" alt="image-20240813222250693"></p><h2 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h2><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><h4 id="set-key-value" tabindex="-1">set key value <a class="header-anchor" href="#set-key-value" aria-label="Permalink to &quot;set key value&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [NX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XX]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GET] [EX seconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX milliseconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXAT unix-time-seconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PXAT unix-time-milliseconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KEEPTTL]</span></span></code></pre></div><p>set 命令有 nx、xx、ex、px 和 keepttl 五个可选参数：</p><ul><li>ex seconds：以秒为单位设置过期时间</li><li>px milliseconds：以毫秒为单位设置过期时间</li><li>exat unix-time-seconds：设置以秒为单位 Unix 时间戳所对应的时间为过期时间</li><li>pxat unix-time-milliseconds：设置以毫秒为单位 Unix 时间戳所对应的时间为过期时间</li><li>nx：键不存在的时候设置的键值</li><li>xx：键存在的时候设置的键值</li><li>keepttl：保留设置前指定键的生存时间</li><li>get：返回指定键原本的值，不存在返回 nil</li></ul><h4 id="get-key" tabindex="-1">get key <a class="header-anchor" href="#get-key" aria-label="Permalink to &quot;get key&quot;">​</a></h4><p>获取 key 对应的值</p><h4 id="mset-mget-msetnx" tabindex="-1">mset/mget/msetnx <a class="header-anchor" href="#mset-mget-msetnx" aria-label="Permalink to &quot;mset/mget/msetnx&quot;">​</a></h4><p>批量操作</p><h4 id="getrange-setrange" tabindex="-1">getrange/setrange <a class="header-anchor" href="#getrange-setrange" aria-label="Permalink to &quot;getrange/setrange&quot;">​</a></h4><p>获取/设置指定区间的值</p><h4 id="incr-decr" tabindex="-1">incr/decr <a class="header-anchor" href="#incr-decr" aria-label="Permalink to &quot;incr/decr&quot;">​</a></h4><p>递增递减数字</p><h4 id="incr-by-decr-by" tabindex="-1">incr by/decr by <a class="header-anchor" href="#incr-by-decr-by" aria-label="Permalink to &quot;incr by/decr by&quot;">​</a></h4><p>增加/减少指定整数</p><h4 id="strlen-append" tabindex="-1">strlen/append <a class="header-anchor" href="#strlen-append" aria-label="Permalink to &quot;strlen/append&quot;">​</a></h4><p>获取字符串长度和内容追加</p><h4 id="getset" tabindex="-1">getset <a class="header-anchor" href="#getset" aria-label="Permalink to &quot;getset&quot;">​</a></h4><p>先 get 再 set</p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ol><li>缓存对象</li><li>分布式锁（setnx）</li><li>常规计数（incr/decr）</li></ol><h2 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h2><p>底层实际是个双端链表，对两端操作性能很高，但通过索引下标的操作中间的节点性能会较差。主要功能有 push/pop 等，一般用在栈、队列、消息队列等场景，比如微信公众号订阅的消息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lpush</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likearticle:userid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> articleid1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> articleid2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likearticle:userid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 显示 list 中的十条消息</span></span></code></pre></div><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><p>KV 键值对，JD 购物车早期设计，目前不再采用，当前小中厂可用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">新增商品</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shopcar:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 商品</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 增加数量 hincrby shopcar: uid 商品 id 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 商品总数 hlen shopcar: uid</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全部选择 hgetall shopcar: uid</span></span></code></pre></div><h2 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h2><p>单值多 value, 且无重复，应用场景：</p><ul><li>微信抽奖小程序</li><li>微信朋友圈点赞查看同赞好友</li><li>QQ 内推可能认识的人</li></ul><h2 id="sorted-set" tabindex="-1">sorted-set <a class="header-anchor" href="#sorted-set" aria-label="Permalink to &quot;sorted-set&quot;">​</a></h2><p>根据商品销售对商品进行排序显示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">商品编号</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1001</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 销量</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 999,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 商品编号</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 销量</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	zadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> goods:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sellsort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 999</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1002</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 有一个客户又买了两件商品 1001							zincrby goods: sellsort 2 1001</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 求商品销量前十名												 zrange goods: sellsort 0 9 withscores</span></span></code></pre></div><h2 id="bitmap" tabindex="-1">bitmap <a class="header-anchor" href="#bitmap" aria-label="Permalink to &quot;bitmap&quot;">​</a></h2><p>由 0 和 1 状态表现的二进制位的 bit 数组，适合应用场景有签到</p><h2 id="hyperloglog" tabindex="-1">hyperloglog <a class="header-anchor" href="#hyperloglog" aria-label="Permalink to &quot;hyperloglog&quot;">​</a></h2><p>用于 UV(Unique Visitor)、PV(Page View)、DAU(Daily Active User)、MAU(Monthly Active User)统计</p><h2 id="geo" tabindex="-1">geo <a class="header-anchor" href="#geo" aria-label="Permalink to &quot;geo&quot;">​</a></h2><p>地图场景：</p><ul><li>geoadd 添加经纬度坐标</li><li>geopos 返回经纬度</li><li>geohash 返回坐标的 geohash 表示</li><li>geodist 两个位置之间的距离</li><li>georadius 以半径为中心，查找附近的 xxx</li><li>georadiusbymember 找出位于指定范围内的元素，中心点是由给定的位置元素决定</li></ul><h2 id="stream" tabindex="-1">stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;stream&quot;">​</a></h2><p>实现消息队列，支持消息的持久化、自动生成全局唯一 id、ack 确认消息的模式、消费组模式等，让消息队列更加稳定和可靠</p><h2 id="bitfields" tabindex="-1">bitfields <a class="header-anchor" href="#bitfields" aria-label="Permalink to &quot;bitfields&quot;">​</a></h2><p><img src="`+l+'" alt="image-20240814110546160"></p>',49),r=[n];function p(d,k,o,c,g,y){return i(),a("div",null,r)}const b=s(h,[["render",p]]);export{F as __pageData,b as default};
